@model ShopViewModel 
@{
	ViewBag.Title = "Shop";

}

<!-- Page title -->
<div class="page-title parallax parallax1">
	<div class="container">
		<div class="row">
			<div class="col-md-12">
				<div class="page-title-heading">
					<h1 class="title">Shop</h1>
				</div><!-- /.page-title-heading -->
				<div class="breadcrumbs">
					<ul>
						<li><a href="@Url.Action("Index", "Home")">Home</a></li>
						<li><a href="@Url.Action("Index", "Shop")">Shop</a></li>
					</ul>
				</div><!-- /.breadcrumbs -->
			</div><!-- /.col-md-12 -->
		</div><!-- /.row -->
	</div><!-- /.container -->
</div><!-- /.page-title -->

<section class="flat-row main-shop shop-slidebar">
	<div class="container">
		<div class="row">
			<div class="col-md-3">
				<div class="sidebar slidebar-shop">
					<div class="widget widget-search">
						<form role="search" method="get" class="search-form" action="@Url.Action("Index", "Shop")">
							<div class="searchContainer">
								<input class="searchBox" type="search" placeholder="Search …" value="@Model.SearchTerm" name="searchTerm">
								<button type="submit"><i class="fa fa-search searchIcon"></i></button>
							</div>
						</form>

						
					</div><!-- /.widget-search -->
					<div class="widget widget-sort-by">
						<h5 class="widget-title">
							Sort By
						</h5>
						<ul>
							<li><a data-href="@Url.Action("FilterProducts", "Shop", new { SearchTerm = Model.SearchTerm, sortBy = (int)SortByEnum.Default , CategoryID = Model.CategoryID})" class="data-link @(Model.SortBy.HasValue ? Model.SortBy.Value == (int) SortByEnum.Default ? "active" : string.Empty : string.Empty)">Default - Newest</a></li>
							<li><a data-href="@Url.Action("FilterProducts","Shop",new { SearchTerm = Model.SearchTerm, sortBy = (int)SortByEnum.Popularity, CategoryID = Model.CategoryID})" class="data-link @(Model.SortBy.HasValue ? Model.SortBy.Value == (int) SortByEnum.Popularity ? "active" : string.Empty : string.Empty)">Popularity</a></li>
							<li><a data-href="@Url.Action("FilterProducts","Shop",new { SearchTerm = Model.SearchTerm,sortBy = (int)SortByEnum.LowToHighPrices, CategoryID = Model.CategoryID})" class="data-link @(Model.SortBy.HasValue ? Model.SortBy.Value == (int) SortByEnum.LowToHighPrices ? "active" : string.Empty : string.Empty)">Price: low to high</a></li>
							<li><a data-href="@Url.Action("FilterProducts","Shop",new { SearchTerm = Model.SearchTerm,sortBy = (int)SortByEnum.HighToLowPrices, CategoryID = Model.CategoryID})" class="data-link @(Model.SortBy.HasValue ? Model.SortBy.Value == (int) SortByEnum.HighToLowPrices ? "active" : string.Empty : string.Empty)">Price: high to low</a></li>
						</ul>
					</div><!-- /.widget-sort-by -->
					<!--<div class="widget widget-color">
		<h5 class="widget-title">
			Colors
		</h5>
		<ul class="flat-color-list icon-left">
			<li><a href="#" class="yellow"></a><span>Yellow</span> <span class="pull-right">25</span></li>
			<li><a href="#" class="pink"> </a><span>White</span> <span class="pull-right">16</span></li>
			<li><a href="#" class="red active"></a><span>Red</span> <span class="pull-right">28</span></li>
			<li><a href="#" class="black"></a><span>Black</span> <span class="pull-right">12</span></li>
			<li><a href="#" class="blue"></a><span>Green</span> <span class="pull-right">0</span></li>
		</ul>
	</div><!-- /.widget-color -->
					<!-- /.Colors -->
					<!--<div class="widget widget-size">
		<h5 class="widget-title">
			Size
		</h5>
		<ul>
			<li class="checkbox">
				<input type="checkbox" name="checkbok1" id="checkbox1">
				<label for="checkbox1">
					<a href="#">L</a>
				</label>
			</li>
			<li class="checkbox">
				<input type="checkbox" name="checkbok2" id="checkbox2">
				<label for="checkbox2">
					<a href="#">M</a>
				</label>
			</li>
			<li class="checkbox">
				<input type="checkbox" name="checkbok3" id="checkbox3">
				<label for="checkbox3">
					<a href="#">S</a>
				</label>
			</li>
			<li class="checkbox">
				<input type="checkbox" name="checkbok4" id="checkbox4">
				<label for="checkbox4">
					<a href="#">X</a>
				</label>
			</li>
			<li class="checkbox">
				<input type="checkbox" name="checkbok5" id="checkbox5">
				<label for="checkbox5">
					<a href="#">XL</a>
				</label>
			</li>
			<li class="checkbox">
				<input type="checkbox" name="checkbok6" id="checkbox6">
				<label for="checkbox6">
					<a href="#">XXL</a>
				</label>
			</li>
		</ul>
	</div><!-- /.widget-size -->
					<!-- /.Size -->
					<div class="widget widget-price">
						<h5 class="widget-title">Filter by price</h5>
						<div class="price-filter">
							<div id="slide-range"></div>
							<p class="amount">
								Price: <input type="text" id="amount" disabled="">
							</p>
						</div>
					</div>
					<div class="widget widget_tag">
						<h5 class="widget-title">
							Featured Categories
						</h5>
						<div class="tag-list">
							@foreach (var category in Model.FeaturedCategories)
							{
								<a data-href="@Url.Action("FilterProducts","Shop",new { SearchTerm = Model.SearchTerm, categoryID = category.ID, sortBy= Model.SortBy, })" class="data-link @(Model.CategoryID.HasValue && Model.CategoryID.Value == category.ID ? "active" : string.Empty)">@category.Name</a>
							}

						</div>
					</div><!-- /.widget -->
					@*<a data-href="@Url.Action("Index","Shop")" class="btn btn-danger">Reset</a>*@
					<button onclick="window.location.href = '@Url.Action("Index","Shop")';">Reset</button>
				</div><!-- /.sidebar -->
			</div><!-- /.col-md-3 -->


			<div class="col-md-9">
				<div id="filterProducts">
					@{
						var filterproducts = new FilterProductViewModel { SearchTerm = Model.SearchTerm, Products = Model.Products, Pager = Model.Pager, SortBy = Model.SortBy, CategoryID = Model.CategoryID };

						Html.RenderAction("FilterProducts", filterproducts);
					}
				</div>
				<!-- Call Partial View -->

			</div><!-- /.col-md-9 -->

		</div><!-- /.row -->
		</div><!-- /.container -->
</section><!-- /.flat-row -->

<style>
	.searchContainer {
  display: inline-flex;
  flex: 1 1 300px;
  position: relative;
  border: 1px solid #ccc;
  border-radius: 5px;
  overflow: hidden;
}

.searchIcon {
  padding: 0.5rem;
  background-color: #f63440;
  color:#fff;
}


.searchBox {
  border: 0;
  padding: 0.5rem 0.5rem 0.5rem 0;
  flex: 1;
}

.searchButton {
  background: #538ac5;
  border: 0;
  color: white;
  padding: 0.5rem;
  border-radius: 0;
}

</style>


<script>

	function updateCartProducts() {
		var cartProducts;
		var existingCookieData = $.cookie('CartProducts');

		if (existingCookieData != undefined && existingCookieData != "" && existingCookieData != null) {
			cartProducts = existingCookieData.split('-');
		}
		else {
			cartProducts = [];
		}

		$("#NoOfCartProducts").html(cartProducts.length);
	};

	
	function hideLoader() {
		$(".loader").hide();
		$("#loading-overlay").hide('slow');
	};

	function showLoader() {
		$(".loader").show();
		$("#loading-overlay").show();
	};
	//


	var CallTimeout;
	var priceSlider = $("#slide-range").slider({
		range: true,
		min: 0,
		max: @Model.MaximumPrice,
		values: [0,@Model.MaximumPrice],
		slide: function (event, ui) {
			var minPrice = ui.values[0];
			var maxPrice = ui.values[1];

            $("#amount").val("$ " + minPrice + ".00" + " - " + "$ " + maxPrice + ".00");

			clearTimeout(CallTimeout);
			CallTimeout = setTimeout(GetPriceRangeData, 1000);

		}

	});



	function GetPriceRangeData(){
		showLoader();
		$.ajax({
			//url: '/Category/Create'
			url: '@Url.Action("FilterProducts","Shop")',
			data: {
				SearchTerm: $("#SearchTerm").val(),
				CategoryID: $("#CategoryID").val(),
				SortBy: $("#SortBy").val(),
				maximumPrice: priceSlider.slider("values",1),
				minimumPrice: priceSlider.slider("values",0)
			}
		})
			.done(function (response) {
				$("#filterProducts").html(response);
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
        	alert("Ajax Request Failed");
		})
		.always(function () {
					hideLoader();
				});
	}

	$(".data-link").click(function myfunction() {
		var url = $(this).attr("data-href");
		if (url != "" || url != undefined) {
			GetData(url);
		}
		else {
			swal({
				title: "Warning",
				text: "Please fill the valid data in fields",
				icon: "warning",
				buttons: true,
				dangerMode: true,
			})
		}
	});

	function GetData(DUrl) {
		showLoader();
		$.ajax({
			//url: '/Category/Create'
			url: DUrl,
			data: {
				maximumPrice: priceSlider.slider("values",1),
				minimumPrice: priceSlider.slider("values",0)
			}
		})
			.done(function (response) {
				$("#filterProducts").html(response);
				focusAction("productsDiv");
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
        	alert("Ajax Request Failed");
		})
		.always(function () {
					hideLoader();
				});
	}



	@*$(".addToWishlist").click(function () {

		var currentElement = this;

		if ($(this).attr("data-wish") == "true") {

			$.ajax({
				url: '@Url.Action("RemoveFromWishlist", "Shop")',
				data: {
					productID: $(this).attr("data-id")
				}
			})
				.done(function (response) {
					if (response.Success) {
						swal("Done", "Removed From your Wishlist.", "success");
						$(currentElement).attr("src", "/Content/images/Default/unfill heart.png");
						$(currentElement).attr("data-wish", "false");
					}
					else {
						swal("Error", "Unable to Add this product to your Wishlist.", "error");
					}
				})
				.fail(function (XMLHttpRequest, textStatus, errorThrown) {
					alert("Ajax Request Failed");
				});

		}
		else {

			$.ajax({
				url: '@Url.Action("SaveToWishlist", "Shop")',
				data: {
					productID: $(this).attr("data-id")
				}
			})
				.done(function (response) {
					if (response.Success) {
						swal("Done", "Add To Wishlist.", "success");
						$(currentElement).attr("src", "/Content/images/Default/heart fill.png");
						$(currentElement).attr("data-wish", "true");
					}
					else {
						swal("Error", "Unable to Add this product to your Wishlist.", "error");
					}
				})
				.fail(function (XMLHttpRequest, textStatus, errorThrown) {
					alert("Ajax Request Failed");
				});

		}
	});*@



	$(".addToWishlist").click(function () {

		var currentElement = this;

		if ($(this).attr("data-wish") == "true") {
			showLoader();
			//console.log("AddToWihslist() Called");
			$.ajax({
				url: '@Url.Action("RemoveFromWishlist", "Shop")',
				data: {
					productID: $(this).attr("data-id")
				}
			})
				.done(function (response) {
					if (response.Success) {
						swal("Done", "Removed From your Wishlist.", "success");
						$(currentElement).attr("src", "/Content/images/Default/unfill heart.png");
						$(currentElement).attr("data-wish", "false");
					}
					else {
						swal("Error", "Unable to Add this product to your Wishlist.", "error");
					}
				})
				.fail(function (XMLHttpRequest, textStatus, errorThrown) {
					alert("Ajax Request Failed");
				})
				.always(function () {
					hideLoader();
				});

		}
		else {
			showLoader();
			$.ajax({
				url: '@Url.Action("SaveToWishlist", "Shop")',
				data: {
					productID: $(this).attr("data-id")
				}
			})
				.done(function (response) {
					if (response.Success) {
						swal("Done", "Add To Wishlist.", "success");
						$(currentElement).attr("src", "/Content/images/Default/heart fill.png");
						$(currentElement).attr("data-wish", "true");
					}
					else {
						swal("Error", "Unable to Add this product to your Wishlist.", "error");
					}
				})
				.fail(function (XMLHttpRequest, textStatus, errorThrown) {
					alert("Ajax Request Failed");
				})
				.always(function () {
					hideLoader();
				});

		}
});


	

	function focusAction(DivToFocus) {
		$('html,body').animate({
			scrollTop: $("#" + DivToFocus).offset().top - 100
		}, 1000);
	}
</script>